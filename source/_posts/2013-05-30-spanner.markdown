---
layout: post
title: "spanner"
date: 2013-05-30 18:05
comments: true
categories: 
published: true
---

##What is Spanner?

Spanner is a highly distributed, externally consistent database
developed by Google.  It provides replication and transactions over a
geographically distributed set of servers.  Spanner uses time bounds,
Paxos, and two-phase commit to ensure external consistency.

##Interesting Ideas

Spanner shows the power of the TrueTime API (TT). A call to TT.now() provides a
range of time to an application.  The actual time is guaranteed to lie
somewhere within that range. This simple idea allows for some nice properties.

Read locks can be avoided. Spanner has two kind of reads, essentially a
'current value read' which it calls a read-only transaction, and a snapshot
read which is a read in the past. The two read types are closely related. In
both cases the read can be performed at any replica that is sufficiently up to
date (spanner replicas keep a variable called <code>t<sub>safe</sub></code>
that is known to have passed and therefore all writes prior have been
included). The difference is that since snapshot read incudes some notion of
staleness, it should succeed at more replicas (i.e. more replicas should be
sufficiently up to date).

Paxos leader leases can be maintained. The Paxos leader maintain lease votes
and when it has a quorum, knows it has a valid lease. TT allows these leases to
remain disjoint without requiring additional Paxos logging.

Schema changes can be performed atomically without blocking. Spanner picks a
future time for the change to occur. Since operations have a bounded error on
the real time, each replica knows if the operation is safe to perform (it
either occurs wholly before or after the schema change or it blocks until the
schema change time has passed).

<!-- Spanner uses clocks with bounded uncertainty to provide synchrony between
servers. It also shards an application's data to provide fine-grained load
distribution. Transactions are also provided to applications in order to deal
with independently managed shards.  -->
##Subtleties

TrueTime guarantees one thing: that the "absolute" time is within the specified
interval.  Since Spanner commits only when <code>TT.now.after(timestamp)</code>
is true, we are guaranteed that from now on <code>TT.now.latest()</code> will
always be larger than the commited timestamp on all servers.

Because of TrueTime, clients can read a consistent snapshot of data without
engaging in two-phase commit.

Spanner very carefully chooses timestamps for RW transactions to ensure when
they are safely visible.  They call this the *commit-wait rule*.

##Questions

* **Why is the write throughput so low?**  4K ops/sec for one server not
 running Paxos and not waiting for anyother commit times seems very low.

* **Why is the throughput experiment in 5.1 CPU bound?**

* **How far appart do the servers need to be for TT to be 'worth it'** Would it
 make sense for servers in the same rack? data center? city?

* **What happens if we use logical time(which preserves causality) rather than the true time?** Maybe external
consistency breaks, but the system is still sequentially consistent.

[6.824 notes](http://pdos.csail.mit.edu/6.824/notes/l07.txt)
